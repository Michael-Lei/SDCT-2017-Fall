Preface - From Nand to Go

=Term list=
{|
|中文
|English
|}

=0.0 Introduction=
The computer is one of the most amazing inventions in the last century. A modern computer is extremely complex, based of billions of silicon transitors, yet still remaining a user-friendly graphical interface and capable of general-purpose computation. How did computer designers manage to do this? 

This is the focus of this 12-week course. The short answer is, to divide the system into several layers, forming a hierarchical structure. In detail, the complex computer system is designed by four crucial concepts: 
*Abstraction: Each hierarchy is abstract as a blackbox, which reads in input from its inferior hierarchy, and expose interfaces to its superior hierarchy. 
*Modularization: The system is divided into separate modules, each independent of others, with some common contract shared by all modules. This is called "design by contract". 
*Staging: The whole process is divided into different stages. 
*Focus: In each stage, only one hierarchy and one module is focused.

With such concepts, the complex task is divided into separate, easier tasks, enabling coorporation. In general, the computer has hardware part and software part. In this course, chapters 1, 2, 3, 5 deals with hardware, the others with software. Spefically, the hierarchies are (from top to bottom): 
*Operating system -- Chapter 12
*high-level language (Jack) -- Chapter 9
*Jack Compiler -- Chapters 10, 11
*VM language (Jack VM) -- Chapters 7, 8
*Virual Machine -- Chapters 7, 8
*Assembly language (Hack) -- Chapter 6
*Assembler -- Chapter 6
*Hardware language -- Chapter 4
*CPU -- Chapter 5
*Hardware modules like the ALU and program counter -- Chapter 3
*Hardware submodules like the full adder -- Chapter 2
*Gates, like "and", "or", "not", "nor" -- Chapter 1
*The "nand" gate (not-and) -- Chapter 1


=0.1 Background=
Below is a logic model. It tells us about the background, the goal, and the validation of this chapter, together with inputs and outpus. 

*Logic Model
**Background
***This publication does not require the reader to have background in computer structure or circuit design.
***The reader may find it a challenge to do the homework by their own, since the computer system is highly abstract, but a publication can help learners overcome these challenges.

**Goal
***Help the reader learn the structure of computer systems, both in hardware and in software.
***Help the reader acquire computational thinking.
***Help the reader accomplish the Nand2Tetris course, and learn some utility tools like MediaWiki, git, and Phabricator.

**Effects
***The reader should understand the four fundamental concepts of computational thinking: Abstraction, modularity, staging, and focus.
***The reader should be able to the teach other learners about the Nand2Tetris course, and be able to apply the logic model in their own fields.
***After reading this publication, the reader should be able to accomplish the 12 homework tasks with the help of the textbook and MOOC videos. 
***After reading this publication, the reader should have a whole picture about the complete hardware and software hierarchy.

**Outputs:
***This publication, with 12 chapters corresponding with the chapters in the textbook, and a logic model in each chapter.
***All 12 homework assignments have been accomplished, with source codes and documentation.
***Weekly reports by our team members, stoted in a git repo together with source codes.
***Functional implementations of the chess Go and 2048 in Jack language, in place of the Tetris game in the textbook.

**Activities
***Write logic models for each chapter.
***Give our perspectives of the chapters, and provide additional materials.
***Guide to the homework in each chapter, providing specifications and our thoughts. Part of our answer codes are exemplified.
***Learn utility tools, such as MediaWiki for documentation, git for groupwork version control, and Phabricator for team resource management.

**Inputs
***textbook: The elements of Computing Systems, by Noam Nisan and Shimon Schocken
***Nand2Tetris course website (video on Coursera, sample code and template for homework)
***Lecture slides by Prof. Ben Gu
***Textbooks about computer architecture and compilers.
***Online references.



=0.2 Glossary=
{|
|Keywords
|-
|abstraction
|-
|modularization
|-
|staging
|-
|focus
|-
|design by contract
|-
|logic model
|}

=0.3 References=
*Nisan, N. & Schocken, S. (2005). The Elements of Computing Systems: Building a Modern Computer from First Principles. Prentice-Hall of India

=0.4 Additional Reading Material=
*Logic model. (2017, October 23). In Wikipedia, The Free Encyclopedia. Retrieved 03:14, December 28, 2017, from https://en.wikipedia.org/w/index.php?title=Logic_model&oldid=806683974 
