// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {

    static Array freeList; // the address of the whole stack

    /** Initializes the class. */
    function void init() {
        let freeList = 0;
        let freeList[2048]=14334;
        let freeList[2049]=2050;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return freeList[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let freeList[address] = value;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {

        var int listRoom, listTag, address;
        var int minSize;
        var int temp;

        let minSize = size + 3;
        let listTag = 2048;
        let listRoom = Memory.peek(listTag);

        while (minSize > listRoom){
            let listTag = Memory.peek(listTag + 1);
            let listRoom = Memory.peek(listTag);
            if (listTag = 0)
            {
                // error
            }
        }

        let address = listTag + 3;

        let temp = Memory.peek(listTag) - size - 1;
        do Memory.poke(listTag, temp);
        do Memory.poke(address - 1, size + 1);

        return address;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */

    function void deAlloc(Array o) {

        // clear

        var int listTag;
        var int temp;

        let listTag = 2048 + 1;
        let temp = listTag;
        let listTag = o - 1;
        let o = Memory.peak(temp);
    }
}
