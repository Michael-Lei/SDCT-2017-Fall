// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static int twoToThe[16];

    /** Initializes the library. */
    function void init() {
        var int n;
        var int i;
        let n = 0;
        let i = 1;
        while (n < 16)
        {
            let twoToThe[n] = i;
            let i = i + i;
        }
    }

    function bool bit(int x, int j)
    {
        var int boolAnd;

        let boolAnd = x & twoToThe[j];
        if (boolAnd != 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0)
        {
            return -x;
        }
        else
        {
            return x;
        }
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int shiftX;
        var int j;
        var int sum;

        let j = 1;
        let sum = 0;
        let shiftX = x;

        while (j < 16)
        {
            if (bit(y, j) = true)
            {
                sum = sum + shiftX;
            }
            shiftX = shiftX * 2;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        var int qMultiy;

        if (y <= 0)
        {
            return 0;
        }
        if (y > x)
        {
            return 0;
        }

        let q = divide(x, y + y);
        let qMultiy = Math.multiply(q, y);

        if (x - qMultiy - qMultiy < y)
        {
            return q + q;
        }
        else
        {
            return q + q + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int j;
        var int result;
        var int temp;

        let j = 7;
        let result = 0;
        while (j >= 0)
        {
            let temp = Math.multiply(result + twoToThe[j], result + twoToThe[j]);
            if ((temp <= x) & (temp > 0))
            {
                result = result + twoToThe[j];
            }
            j = j - 1;
        }

        return result;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b)
        {
            return a;
        }
        else
        {
            return b;
        }

    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b)
        {
            return a;
        }
        else
        {
            return b;
        }
    }
}
